---
title: "Lab 13: Transcriptomics"
author: "Snehita Vallumchetla (PID: A16853399)"
format: pdf
---

Today we will analyze data from a published RNA-seq experiemnt where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014).

## Import countData and colData

There are two datasets I need to import/read
- `countData` the transcript counts per gene (rows) in the different experiments.
- `colData` information (a.k.a. metadata) about the columns (i.e. experiments) in `countData`.

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```


Let's take a look at both data sets with `head()`

```{r}
head(counts)
```
```{r}
head(metadata)
```

>Q1. How many genes are in this dataset? 

There are 38694 genes in this dataset

```{r}
nrow(counts)
```


>Q2. How many ‘control’ cell lines do we have?

There are 4 control cell lines

```{r}
table(metadata$dex)
```


We can extract the various columns and find the average (mean) count value per gene for the all of the control experiments and compare it to the mean count value for the treated experiments. 

- Extract all "control" columns from the `counts` data
- Find the mean value for each gene in this column

```{r}
control.inds <- metadata$dex == 'control'
control.counts <- counts[, control.inds]
```

```{r}
dim(control.counts)
```

Now find the row wise mean

```{r}
control.mean <- rowSums(control.counts)/ncol(control.counts)
head(control.mean)
```

>Q3. How would you make the above code in either approach more robust? Is there a function that could help here? 

We can make the code more robust by dividing by the number of columns of the control.counts, as this would be more robust with samples of varrying numbers of columns. 

>Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

```{r}
treated.inds <-  metadata$dex == 'treated'
treated.counts <- counts[, treated.inds]
treated.mean <- rowSums(treated.counts)/ncol(treated.counts)
head(treated.mean)
```


```{r}
meancounts <- data.frame(control.mean, treated.mean)
head(meancounts)
```

>Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.
Let's have a look - i.e. plot control.mean vs treated.mean

```{r}
plot(meancounts)
```

> Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?

We would use geom_point to make a scatter plot. 

```{r}
library(ggplot2)

ggplot(meancounts) + 
  aes(control.mean, treated.mean) +
  geom_point(alpha = 0.3)

```

Since there is a lot of overplotting and a heavy skew in our plot, we can fix this by scaling our plot using a log transformation. 

>Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this? 

We can use the argument log = 'xy' to scale the axis

```{r}
plot(meancounts, log = 'xy')
```

We most often work in log 2 units as this makes the math easier. Let's have a play to see this: 

```{r}
# treated/control
log2(40/20)
```

```{r}
log2(80/20)
```

```{r}
log2(20/40)
```

We can now add "log2 fold-change" values to our `meancounts`

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean / meancounts$control.mean)

head(meancounts)
```

Filter out the 0 values

```{r}
to.keep <- rowSums(meancounts[,1:2] == 0) == 0
mycounts <- meancounts[to.keep, ]
nrow(mycounts)
```

>Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level? 
We need to filter out zero count genes - i.e. remove the rows (genes) that have a 0 value in either control or treated means. 

How many genes are "up" regulated at the common log2 fold-change threshold of +2. 

```{r}
up.inds <- meancounts$log2fc >= 2
sum(up.inds, na.rm = 1)
```

>Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level? 

How many genes are "down" regulated at the threshold of -2. 

```{r}
down.inds <- meancounts$log2fc <= -2
sum(down.inds, na.rm = 1)
```

>Q10. Do you trust these results? Why or why not?

These valeus can't be trusted as we do not know the statistical significance of the upregulated and downregulated genes! 

## DESeq2 analysis

To do this the right way we need to consider the significance of the differences not just the magnitude. 

```{r}
#| message: false
library(DESeq2)
```


To use this package it wants countData and colData in a specific format. 

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts, 
                       colData = metadata, 
                       design = ~dex)
```

```{r}
dds <- DESeq(dds)
```
Extract my results
```{r}
res <- results(dds)
head(res)
```
We can make summary figure of the two most important parts of these results: log2fold change vs is that change significant

plot of fold change vs p-value adjusted for multiple testing:
```{r}
plot(res$log2FoldChange, res$padj)
```

Take the log of the p-value: 

```{r}
plot(res$log2FoldChange, log(res$padj))
```

We can flip the y-axis by putting a minus sign on it which is a standard volcano plot

```{r}
plot(res$log2FoldChange, -log(res$padj),
     xlab = 'log2 fold-change',
     ylab = '-log(p-value)')
```

Let's save our work to date

```{r}
write.csv(res, file = 'myresults.csv')
```

To finish off let's make our volcano plot nicer:

- Add the log2 threshold lines at +2/-2
- Add the p-value threshold lines at 0.05
- Add color to highlight the subset of genes that meet both of the above threholds

Make it with ggplot:

```{r}
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "magenta" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "orange"
```


```{r}
ggplot(res) + 
  aes(res$log2FoldChange, -log(res$padj)) + 
  geom_point(col = mycols, alpha = 1, shape = 1) + 
  geom_vline(xintercept = c(-2,2), linetype = 'dashed', color = 'purple') + 
  geom_hline(yintercept = -log(0.1), linetype = 'dashed', color = 'purple')  

```

## Adding annotation data: 


We will use some BioConductor packages to map the ENSEMBLE ids to more useful gene SYMBOL names/ids. 

We can install these packages with: 

`BiocManager::install("AnnotationDbi")`

```{r}
library(AnnotationDbi)
library(org.Hs.eg.db)
```

What database identifiers can I translate between here: 

```{r}
columns(org.Hs.eg.db)
```
>Q11. Run the mapIds() function two more times to add the Entrez ID and GENENAME as new columns called res$entrez, res$uniprot and res$genename.

We can now use the `mapIDs()` function to translate/map between these different identifier formats. 

Let's add SYMBOL, GENENAME, and ENTREZID

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
       keys = rownames(res),
       keytype = 'ENSEMBL',
       column = 'SYMBOL')

res$genename <- mapIds(org.Hs.eg.db,
       keys = rownames(res),
       keytype = 'ENSEMBL',
       column = 'GENENAME')
  
res$entrez <- mapIds(org.Hs.eg.db,
       keys = rownames(res),
       keytype = 'ENSEMBL',
       column = 'ENTREZID')
```

```{r}
head(res)
```


## Pathway analysis: 

Now I know the gene names and their IDs in different databases I want to know what type of biology they are involved in...

This is the job of "pathway analysis" (a.k.a "gene set enrichment)

There are tons of different BioConductor packages for pathway analysis here we use just one of them called **gage** and **pathview**. I will install these packages with the `BiocManager::install(c('gage', 'pathview', 'gageData'))`

```{r}
library(gage)
library(gageData)
library(pathview)
```
Load up the KEGG genesets:
```{r}
data(kegg.sets.hs)
```

```{r}
head(kegg.sets.hs, 2)
```
We will use these KEGG genesets (a.k.a pathways) and our `res` results to observe what overlaps. To do this we will use the `gage()` function. 

For input `gage()` wants just a vector of importance - in our case FoldChange values. 

```{r}
foldchanges <- res$log2FoldChange
```

Vectors in R have "names" that are useful for bookkeeping so we know what a given value corresponds to. 

Let's put names on our `foldchanges` vector - here we will use `res$entrez`

```{r}
names(foldchanges) <- res$entrez
```

Now we can run "pathway analysis"
```{r}
keggres <- gage(foldchanges, gsets = kegg.sets.hs)
```

```{r}
head(keggres$less)
```

We can get a pathway image file with our genesets highlighted via the `pathview()` function. 

```{r}
pathview(foldchanges, pathway.id = 'hsa05310')
```

Insert this figure in my report

![](hsa05310.pathview.png)












